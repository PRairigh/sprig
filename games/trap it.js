
// Create a tune:
const melody = tune`
109.0909090909091: C4-109.0909090909091,
109.0909090909091: E4^109.0909090909091 + F4^109.0909090909091 + G4^109.0909090909091 + C4-109.0909090909091,
109.0909090909091: E4^109.0909090909091 + G4^109.0909090909091 + A4^109.0909090909091 + B4^109.0909090909091 + C5^109.0909090909091,
109.0909090909091: F4~109.0909090909091 + G4~109.0909090909091 + A4~109.0909090909091 + D4^109.0909090909091 + E4^109.0909090909091,
109.0909090909091: G5~109.0909090909091 + F5~109.0909090909091 + E5~109.0909090909091 + D5~109.0909090909091 + C5~109.0909090909091,
109.0909090909091: A4~109.0909090909091 + F4~109.0909090909091 + D4^109.0909090909091 + C4-109.0909090909091,
109.0909090909091: A4~109.0909090909091 + G4~109.0909090909091 + E4~109.0909090909091 + D4^109.0909090909091 + C4-109.0909090909091,
109.0909090909091: C5~109.0909090909091 + A4~109.0909090909091 + B4~109.0909090909091 + D5~109.0909090909091 + G4~109.0909090909091,
109.0909090909091: C5~109.0909090909091 + A4~109.0909090909091 + E4^109.0909090909091 + C4-109.0909090909091,
109.0909090909091: G4~109.0909090909091 + A4~109.0909090909091 + B4~109.0909090909091 + E5~109.0909090909091 + D5~109.0909090909091,
109.0909090909091: G4~109.0909090909091 + C4~109.0909090909091 + F5~109.0909090909091 + E5~109.0909090909091 + D5~109.0909090909091,
109.0909090909091: G4~109.0909090909091 + D5~109.0909090909091 + B4~109.0909090909091 + F4^109.0909090909091 + C4-109.0909090909091,
109.0909090909091: B4~109.0909090909091 + E4~109.0909090909091 + F4~109.0909090909091 + G4~109.0909090909091 + D5~109.0909090909091,
109.0909090909091: C5~109.0909090909091 + B4~109.0909090909091 + D4~109.0909090909091 + E4~109.0909090909091 + G5~109.0909090909091,
109.0909090909091: A4~109.0909090909091 + B4~109.0909090909091 + E5~109.0909090909091 + C4~109.0909090909091 + E4~109.0909090909091,
109.0909090909091: G4~109.0909090909091 + F4~109.0909090909091 + B4~109.0909090909091 + E5~109.0909090909091 + C4~109.0909090909091,
109.0909090909091: F4~109.0909090909091 + C5~109.0909090909091 + E5~109.0909090909091 + C4~109.0909090909091 + D4~109.0909090909091,
109.0909090909091: F4~109.0909090909091 + C5~109.0909090909091 + E5~109.0909090909091 + C4~109.0909090909091 + D4~109.0909090909091,
109.0909090909091: F4~109.0909090909091 + G4~109.0909090909091 + E5~109.0909090909091 + D5~109.0909090909091 + C4~109.0909090909091,
109.0909090909091: G4~109.0909090909091 + A4~109.0909090909091 + B4~109.0909090909091 + C5~109.0909090909091 + D5~109.0909090909091,
109.0909090909091: D5~109.0909090909091 + D4~109.0909090909091 + A5~109.0909090909091 + G5~109.0909090909091 + F5~109.0909090909091,
109.0909090909091: C5~109.0909090909091 + F4~109.0909090909091 + E4~109.0909090909091 + F5^109.0909090909091 + C4-109.0909090909091,
109.0909090909091: C5~109.0909090909091 + B4~109.0909090909091 + A4~109.0909090909091 + G4~109.0909090909091 + G5~109.0909090909091,
109.0909090909091: B4~109.0909090909091 + C5~109.0909090909091 + D5~109.0909090909091 + E5~109.0909090909091 + F5~109.0909090909091,
109.0909090909091: D5~109.0909090909091 + A5~109.0909090909091 + G5~109.0909090909091 + F5~109.0909090909091 + E4~109.0909090909091,
109.0909090909091: F5~109.0909090909091 + E5~109.0909090909091 + D5~109.0909090909091 + C5~109.0909090909091 + E4~109.0909090909091,
109.0909090909091: C5~109.0909090909091 + B4~109.0909090909091 + F4~109.0909090909091 + D4^109.0909090909091 + G4^109.0909090909091,
109.0909090909091: B4~109.0909090909091 + G4^109.0909090909091 + D4^109.0909090909091 + F4^109.0909090909091 + D5^109.0909090909091,
109.0909090909091: B4~109.0909090909091 + A4~109.0909090909091 + D4^109.0909090909091 + G4^109.0909090909091 + D5^109.0909090909091,
109.0909090909091: E5^109.0909090909091 + C4-109.0909090909091,
109.0909090909091: C4-109.0909090909091,
109.0909090909091: C4-109.0909090909091`

// Play it:
playTune(melody)
const playback = playTune(melody, Infinity)





const player = "p"
const wall = "j"
 const enemy = "e"

addText( "Use 'wasd' to move.\nThe goal is to trap\nthe robot with\nwalls \n(using 'jkli'). \ngo down to look at \nrobot health ", {
        x:1,
        y:4,        
        size: 1
})

setLegend(
  [ player, bitmap`
0000000000000000
0..............0
0..............0
0..............0
0..............0
0..............0
0..............0
0..............0
0..............0
0..............0
0..............0
0..............0
0..............0
0..............0
0..............0
0000000000000000` ],
  [ wall, bitmap`
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111` ], 
[ enemy, bitmap`
LLLLLL0LLLLLLLLL
LLLLLLL0LLLLLLLL
LLLLLLLL0LLLLLLL
LL333LLLL0000LLL
LL333LLLL0000LLL
LL333LLLL0000LLL
LLLLLLLLLLLLL0LL
LLLLLLLLLLLLLL0L
LL5555555555LLL0
LL5555555555LLLL
LL5555555555LLLL
LL5555555555LLLL
LL5555555555LLLL
LL5555555555LLLL
LL5555555555LLLL
LLLLLLLLLLLLLLLL` ], 
)

setSolids([wall,player,enemy])

let level = 0
const levels = [
  map`
j.................................
..................................
..................................
p.................................
..................................
......................e...........
..................................
..................................
..................................
..................................
..................................
..................................
..................................
..................................
..................................
..................................`
]

setMap(levels[level])

setPushables({
  [ player ]: []
})

onInput("s", () => {
  getFirst(player).y += 2
  moveMonsters()
})

onInput("w", () => {
  getFirst(player).y += -2
  moveMonsters()
  clearText()
})

onInput("d", () => {
  getFirst(player).x += 2
  moveMonsters()
  clearText()
})

onInput("a", () => {
  getFirst(player).x += -2
  moveMonsters()
  clearText()
})

//afterInput(postInput)

onInput("l", () => {
  moveMonsters()
  const wallSprite = getFirst(wall)
  const curPlayer = getFirst(player)
  if (wallSprite) {
    addSprite(curPlayer.x+1, curPlayer.y+0, wall)
  }
  clearText()
})

onInput("i", () => {
  moveMonsters()
  const wallSprite = getFirst(wall)
  const curPlayer = getFirst(player)
  if (wallSprite) {
    addSprite(curPlayer.x+0, curPlayer.y+-1, wall)
  }
  clearText()
})

onInput("k", () => {
  moveMonsters()
  const wallSprite = getFirst(wall)
  const curPlayer = getFirst(player)
  if (wallSprite) {
    addSprite(curPlayer.x+0, curPlayer.y+1, wall)
  }
  clearText()
})

let monster_health = 60

function moveMonsters() {
  let monster_expected_x = 0
  let monster_expected_y = 0
  firstPlayer = getFirst(player)
  monsterList = getAll(enemy)
  for (idx=0; idx < monsterList.length; idx += 1) {

    addText(monsterList[idx].x.toString()+", " + monsterList[idx].y.toString(), {
            x:0, y:1
    })
    monster_expected_x = monsterList[idx].x
    monster_expected_y = monsterList[idx].y

    
    deltaX = firstPlayer.x - monsterList[idx].x
    monsterList[idx].x += Math.sign(deltaX)

    deltaY = firstPlayer.y - monsterList[idx].y
    monsterList[idx].y += Math.sign(deltaY)
    addText(monsterList[idx].x.toString()+", " + monsterList[idx].y.toString(), {
            x:0, y:2
    })

    if (monster_expected_x == monsterList[idx].x && monster_expected_y == monsterList[idx].y) {
      monster_health -= 1;
    } else {
      monster_health = Math.min(monster_health+1, 60)
    }
    if (monster_health < 1) { 
      addText( "YOU WIN", {
        x:10,
        y:4,        
                 })
    } else {
      addText( monster_health.toString(), {
        x:0,
        y:0,        
                 })
    }

  }
}

onInput("j", () => {
  moveMonsters()
  const wallSprite = getFirst(wall)
  const curPlayer = getFirst(player)
  if (wallSprite) {
    addSprite(curPlayer.x+-1, curPlayer.y+0, wall)
  }
  clearText()
})



  